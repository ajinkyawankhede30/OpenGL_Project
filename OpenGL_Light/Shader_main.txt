#shader vertex
#version 430 core

layout(location = 0) in vec3 positions;
layout(location = 1) in vec3 normal;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out vec3 Normal;
out vec3 FragPos;

void main()
{
	FragPos = vec3(model * vec4(positions, 1.0));
	Normal = normal; //normal direction vector	
	gl_Position = projection * view * model * vec4(positions, 1.0);
};



#shader fragment
#version 430 core

out vec4 color;
in vec3 Normal; //normal vector
in vec3 FragPos; // object position vector

uniform vec3 lightColor;
uniform vec3 objectColor;
uniform vec3 lightPos; // light ray position vector

void main()
{
	//ambient light
	float ambientStrength = 0.5;
	vec3 ambient = ambientStrength * lightColor;

	//diffuse light
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	vec3 result = (ambient + diffuse) * objectColor;
	color = vec4(result, 1.0);

	//color = vec4(lightColor * objectColor, 1.0f);
};