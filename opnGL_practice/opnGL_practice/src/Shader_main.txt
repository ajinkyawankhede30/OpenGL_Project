#shader vertex
#version 430 core

layout(location = 0) in vec3 positions;
layout(location = 1) in vec3 aNormal;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out vec3 FragPos;
out vec3 Normal;

void main()
{
	FragPos = vec3(model * vec4(positions, 1.0));
	//Normal = aNormal;
	Normal = mat3(transpose(inverse(model))) * aNormal;
	gl_Position = projection * view  * vec4(FragPos, 1.0);

};



#shader fragment
#version 430 core

out vec4 color;
uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

in vec3 Normal;
in vec3 FragPos;



void main()
{
	float ambientStrength = 0.1;
	float specularStrength = 0.5;

	vec3 ambient = ambientStrength * lightColor;

	//normal dir vector
	vec3 norm = normalize(Normal);

	//light direction vector
	vec3 lightDir = normalize(lightPos - FragPos); 

	//camera view direction
	vec3 viewDir = normalize(viewPos - FragPos);

	//reflect dir vector
	vec3 reflectDir = reflect(-lightDir, norm);

	//diffusion
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	//specular
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor;

	//result
	vec3 result = (ambient + diffuse + specular) * objectColor;
	color = vec4(result, 1.0);

	//color = vec4(lightColor * objectColor, 1.0f);
};